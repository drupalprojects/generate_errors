<?php
/**
 * @file
 * Intentionally trigger errors to test system configuration.
 */

/**
 * Implements hook_menu().
 */
function generate_errors_menu() {
  $items = array();
  $items['generate_errors'] = array(
    'title' => 'Generate Errors',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('generate_errors_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Interface for generating errors.
 */
function generate_errors_form($form, &$form_state) {
  $form = array();

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Intentionally generate an error.'),
  );

  // HTTP Status Code.
  $form['http_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTTP Status Code in Response Header'),
  );

  $form['http_status']['http_status_code'] = array(
    '#type' => 'select',
    '#title' => t('HTTP Status Code'),
    '#options' => array(
      t('4xx Client Error') => generate_errors_http_status_codes('4xx'),
      t('5xx Server Error') => generate_errors_http_status_codes('5xx'),
    ),
    '#empty_option' => t('Manually specify'),
    '#default_value' => 500,
  );

  $form['http_status']['http_status_specify_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code only'),
    '#description' => t('Manually specify HTTP Status Code, digits only'),
    '#size' => 3,
  );

  $form['http_status']['trigger_no_exit'] = array(
    '#type' => 'submit',
    '#value' => 'Set HTTP status code only',
  );

  $form['http_status']['trigger_exit'] = array(
    '#type' => 'submit',
    '#value' => 'Set HTTP status code and exit',
  );

  // Throw exception.
  $form['throw_exception'] = array(
    '#type' => 'fieldset',
    '#title' => t('Throw exception'),
  );

  $form['throw_exception']['description'] = array(
    '#markup' => '<p>' . t('Throw a new Exception and do not catch it.') . '</p>',
  );

  $form['throw_exception']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Throw uncaught exception',
  );

  // Exhaust memory.
  $form['exhaust_memory'] = array(
    '#type' => 'fieldset',
    '#title' => t('Exhaust memory'),
  );
  
  $form['exhaust_memory']['description'] = array(
    '#markup' => '<p>' . t('Executes an infinite loop designed to run out of memory.') . '</p>',
  );

  $form['exhaust_memory']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Exhaust memory',
  );

  // Undefined function.
  $form['undefined_function'] = array(
    '#type' => 'fieldset',
    '#title' => t('Undefined function'),
  );

  $form['undefined_function']['description'] = array(
    '#markup' => '<p>' . t('Call a function that does not exist.') . '</p>',
  );

  $form['undefined_function']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Call undefined function',
  );

  return $form;
}

/**
 * Validation handler for generate_errors_form().
 */
function generate_errors_form_validate($form, &$form_state) {
  if ($form_state['values']['http_status_specify_code']) {
    // Validate custom HTTP Status Code.
    if (!preg_match('/^[1-5]\d{2}$/', $form_state['values']['http_status_specify_code'])) {
      form_set_error('http_status_specify_code', t('You must specify a valid HTTP Status Code.'));
    }
    else {
      // Clean up form.
      $all_http_status_codes = generate_errors_http_status_codes();
      // Manually specified, but it's actually a known code.
      if (array_key_exists($form_state['values']['http_status_specify_code'], $all_http_status_codes)) {
        $form_state['input']['http_status_code'] = $form_state['values']['http_status_specify_code'];
        $form_state['input']['http_status_specify_code'] = '';
      }
      else {
        $form_state['input']['http_status_code'] = '';
      }
    }
  }
}

/**
 * Submit handler for generate_errors_form().
 */
function generate_errors_form_submit($form, &$form_state) {
  global $user;

  // Sticky form.
  $form_state['rebuild'] = TRUE;

  // HTTP Status Code.
  if (in_array($form_state['values']['op'], array(
    'Set HTTP status code only',
    'Set HTTP status code and exit',
  ))) {
    // Manually specified HTTP Status Code.
    if (isset($form_state['values']['http_status_specify_code'])) {
      $selected_code = $form_state['values']['http_status_specify_code'] . ' ' . t('Manually Triggered');
    }
    // Code selected from list.
    else {
      // Build list of all codes.
      $all_http_status_codes = generate_errors_http_status_codes();

      // Get code and label.
      $selected_code = $all_http_status_codes[$form_state['values']['http_status_code']];
    }

    // Set header.
    drupal_add_http_header('Status', $selected_code);

    // Determine if exiting.
    if ($form_state['values']['op'] == 'Set HTTP status code and exit') {
      watchdog('generate errors', 'uid #@uid set HTTP status code @code and exited', array(
        '@uid' => $user->uid,
        '@code' => $selected_code,
      ));
      drupal_set_message(t('Generate Errors - set HTTP status code @code and exit.', array(
        '@code' => $selected_code,
      )));
      drupal_exit();
    }

    // Not exiting.
    watchdog('generate errors', 'uid #@uid set HTTP status code @code', array(
      '@uid' => $user->uid,
      '@code' => $selected_code,
    ));
    drupal_set_message(t('Generate Errors - set HTTP status code @code.', array(
      '@code' => $selected_code,
    )));
  }

  // Throw exception.
  if ($form_state['values']['op'] == 'Throw uncaught exception') {
    watchdog('generate errors', 'uid #@uid threw an uncaught exception', array(
      '@uid' => $user->uid,
    ));
    drupal_set_message(t('Generate Errors - threw an uncaught exception.'));
    throw new Exception('Exception thrown and not caught');
  }

  // Exhaust memory.
  if ($form_state['values']['op'] == 'Exhaust memory') {
    watchdog('generate errors', 'uid #@uid exhausted memory', array(
      '@uid' => $user->uid,
    ));
    drupal_set_message(t('Generate Errors - exhausted memory.'));
    $array = array();
    while(1) {
      $array[] = (object) range(0, 1000);
    }
  }

  // Undefined function memory.
  if ($form_state['values']['op'] == 'Call undefined function') {
    watchdog('generate errors', 'uid #@uid called undefined function', array(
      '@uid' => $user->uid,
    ));
    drupal_set_message(t('Generate Errors - called undefined function.'));
    generate_errors_undefined_function();
  }
}

/**
 * Get HTTP status codes and their labels.
 * 
 * @param string $filter
 *   Optional; defaults to all, can be 4xx and 5xx.
 * 
 * @return array
 *   Array of HTTP status code labels keyed by their status code.
 */
function generate_errors_http_status_codes($filter = 'all') {
  $http_status_codes = array();

  // 4xx Client Error.
  $http_status_codes['4xx'] = array(
    400 => t('400 Bad Request'),
    401 => t('401 Unauthorized'),
    402 => t('402 Payment Required'),
    403 => t('403 Forbidden'),
    404 => t('404 Not Found'),
    405 => t('405 Method Not Allowed'),
    406 => t('406 Not Acceptable'),
    407 => t('407 Proxy Authentication Required'),
    408 => t('408 Request Timeout'),
    409 => t('409 Conflict'),
    410 => t('410 Gone'),
    411 => t('411 Length Required'),
    412 => t('412 Precondition Failed'),
    413 => t('413 Request Entity Too Large'),
    414 => t('414 Request-URI Too Long'),
    415 => t('415 Unsupported Media Type'),
    416 => t('416 Requested Range Not Satisfiable'),
    417 => t('417 Expectation Failed'),
    418 => t('418 I\'m a teapot'),
    419 => t('419 Authentication Timeout'),
    420 => t('420 Enhance Your Calm'),
    422 => t('422 Unprocessable Entity'),
    423 => t('423 Locked'),
    424 => t('424 Failed Dependency'),
    425 => t('425 Unordered Collection'),
    426 => t('426 Upgrade Required'),
    428 => t('428 Precondition Required'),
    429 => t('429 Too Many Requests'),
    431 => t('431 Request Header Fields Too Large'),
    444 => t('444 No Response'),
    449 => t('449 Retry With'),
    450 => t('450 Blocked by Windows Parental Controls'),
    451 => t('451 Unavailable For Legal Reasons'),
  );
  
  // 5xx Server Error.
  $http_status_codes['5xx'] = array(
    500 => t('500 Internal Server Error'),
    501 => t('501 Not Implemented'),
    502 => t('502 Bad Gateway'),
    503 => t('503 Service Unavailable'),
    504 => t('504 Gateway Timeout'),
    505 => t('505 HTTP Version Not Supported'),
    506 => t('506 Variant Also Negotiates'),
    507 => t('507 Insufficient Storage'),
    508 => t('508 Loop Detected'),
    509 => t('509 Bandwidth Limit Exceeded'),
    510 => t('510 Not Extended'),
    511 => t('511 Network Authentication Required'),
  );

  // Return all codes in a single list, useful for translating a code to a name.
  if ($filter == 'all') {
    return $http_status_codes['4xx'] + $http_status_codes['5xx'];
  }
  // Return just a subset of codes.
  if (isset($http_status_codes[$filter])) {
    return $http_status_codes[$filter];
  }
  // Oops.
  return array();
}
